/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, Addr, Collection, ArrayOfCollection, Config } from "./Wrapper.types";
export interface WrapperReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  collectionList: () => Promise<ArrayOfCollection>;
  collection: ({
    collectionIn
  }: {
    collectionIn: string;
  }) => Promise<Collection>;
}
export class WrapperQueryClient implements WrapperReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.collectionList = this.collectionList.bind(this);
    this.collection = this.collection.bind(this);
  }
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  collectionList = async (): Promise<ArrayOfCollection> => {
    return this.client.queryContractSmart(this.contractAddress, {
      collection_list: {}
    });
  };
  collection = async ({
    collectionIn
  }: {
    collectionIn: string;
  }): Promise<Collection> => {
    return this.client.queryContractSmart(this.contractAddress, {
      collection: {
        collection_in: collectionIn
      }
    });
  };
}
export interface WrapperInterface extends WrapperReadOnlyInterface {
  contractAddress: string;
  sender: string;
  acceptAdminRole: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    admin,
    worker
  }: {
    admin?: string;
    worker?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  pause: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unpause: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  wrap: ({
    collectionIn,
    tokenList
  }: {
    collectionIn: string;
    tokenList: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unwrap: ({
    collectionOut,
    tokenList
  }: {
    collectionOut: string;
    tokenList: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addCollection: ({
    collectionIn,
    collectionOut
  }: {
    collectionIn: string;
    collectionOut: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeCollection: ({
    collectionIn
  }: {
    collectionIn: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class WrapperClient extends WrapperQueryClient implements WrapperInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
    this.wrap = this.wrap.bind(this);
    this.unwrap = this.unwrap.bind(this);
    this.addCollection = this.addCollection.bind(this);
    this.removeCollection = this.removeCollection.bind(this);
  }
  acceptAdminRole = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_admin_role: {}
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    admin,
    worker
  }: {
    admin?: string;
    worker?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        worker
      }
    }, fee, memo, _funds);
  };
  pause = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pause: {}
    }, fee, memo, _funds);
  };
  unpause = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unpause: {}
    }, fee, memo, _funds);
  };
  wrap = async ({
    collectionIn,
    tokenList
  }: {
    collectionIn: string;
    tokenList: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      wrap: {
        collection_in: collectionIn,
        token_list: tokenList
      }
    }, fee, memo, _funds);
  };
  unwrap = async ({
    collectionOut,
    tokenList
  }: {
    collectionOut: string;
    tokenList: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unwrap: {
        collection_out: collectionOut,
        token_list: tokenList
      }
    }, fee, memo, _funds);
  };
  addCollection = async ({
    collectionIn,
    collectionOut
  }: {
    collectionIn: string;
    collectionOut: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_collection: {
        collection_in: collectionIn,
        collection_out: collectionOut
      }
    }, fee, memo, _funds);
  };
  removeCollection = async ({
    collectionIn
  }: {
    collectionIn: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_collection: {
        collection_in: collectionIn
      }
    }, fee, memo, _funds);
  };
}