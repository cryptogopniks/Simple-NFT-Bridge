/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { TokenUnverified, Decimal, Uint128, InstantiateMsg, CurrencyForTokenUnverified, ExecuteMsg, Binary, BidType, Addr, ProposalStatus, ProposalTypeForString, Cw20ReceiveMsg, CollectionInfoForString, LiquidationItem, BiddedCollateralItem, TokenItem, ProposalForStringAndTokenUnverified, FundsForTokenUnverified, CollectionForString, QueryMsg, MigrateMsg, AddressConfig, QueryAmountsResponse, Balances, RegularBalances, Vault, ReserveBalances, Borrower, ArrayOfQueryBorrowersResponseItem, QueryBorrowersResponseItem, ArrayOfCollateral, Collateral, ArrayOfQueryCollateralsResponseItem, QueryCollateralsResponseItem, CollectionForAddr, ArrayOfQueryCollectionsResponseItem, QueryCollectionsResponseItem, Token, CommonConfig, CurrencyForToken, ArrayOfLiquidationBid, LiquidationBid, ArrayOfQueryLiquidationBidsByCollectionAddressListResponseItem, QueryLiquidationBidsByCollectionAddressListResponseItem, ArrayOfQueryLiquidationBidsByLiquidatorAddressListResponseItem, QueryLiquidationBidsByLiquidatorAddressListResponseItem, Liquidator, ArrayOfQueryLiquidatorsResponseItem, QueryLiquidatorsResponseItem, ArrayOfTupleOfAddrAndNullable_Decimal, ArrayOfFundsForToken, FundsForToken, ProposalTypeForAddr, ArrayOfQueryProposalsResponseItem, QueryProposalsResponseItem, ProposalForAddrAndToken, RateConfig, Unbonder, ArrayOfQueryUnbondersResponseItem, QueryUnbondersResponseItem, QueryUserInfoResponse } from "./LendingPlatform.types";
export interface LendingPlatformMsg {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  deposit: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unbond: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdraw: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdrawCollateral: ({
    collections
  }: {
    collections: CollectionInfoForString[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  depositCollateral: ({
    collections
  }: {
    collections: CollectionInfoForString[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  borrow: ({
    amount
  }: {
    amount: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  repay: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  placeBid: ({
    collections,
    discount
  }: {
    collections: CollectionInfoForString[];
    discount: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateBid: ({
    amount,
    collections,
    creationDate,
    discount
  }: {
    amount: Uint128;
    collections: CollectionInfoForString[];
    creationDate: number;
    discount: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeBid: ({
    collectionAddresses,
    creationDate
  }: {
    collectionAddresses: string[];
    creationDate: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  liquidate: ({
    targets
  }: {
    targets: LiquidationItem[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptAdminRole: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateAddressConfig: ({
    admin,
    marketMaker,
    minter,
    oracle,
    scheduler,
    worker
  }: {
    admin?: string;
    marketMaker?: string;
    minter?: string;
    oracle?: string;
    scheduler?: string;
    worker?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateRateConfig: ({
    bidMinRate,
    borrowApr,
    borrowFeeRate,
    discountMaxRate,
    discountMinRate,
    liquidationFeeRate
  }: {
    bidMinRate?: Decimal;
    borrowApr?: Decimal;
    borrowFeeRate?: Decimal;
    discountMaxRate?: Decimal;
    discountMinRate?: Decimal;
    liquidationFeeRate?: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateCommonConfig: ({
    bglCurrency,
    borrowersReserveFractionRatio,
    collateralMinValue,
    mainCurrency,
    unbondingPeriod
  }: {
    bglCurrency?: CurrencyForTokenUnverified;
    borrowersReserveFractionRatio?: Decimal;
    collateralMinValue?: Uint128;
    mainCurrency?: CurrencyForTokenUnverified;
    unbondingPeriod?: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  depositReserveLiquidity: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdrawReserveLiquidity: ({
    amount
  }: {
    amount: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  reinforceBglToken: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  pause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unpause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  distributeFunds: ({
    addressAndWeightList
  }: {
    addressAndWeightList: string[][];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeCollection: ({
    address
  }: {
    address: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  createProposal: ({
    proposal
  }: {
    proposal: ProposalForStringAndTokenUnverified;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  rejectProposal: ({
    id
  }: {
    id: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptProposal: ({
    id
  }: {
    id: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class LendingPlatformMsgComposer implements LendingPlatformMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.deposit = this.deposit.bind(this);
    this.unbond = this.unbond.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.withdrawCollateral = this.withdrawCollateral.bind(this);
    this.depositCollateral = this.depositCollateral.bind(this);
    this.borrow = this.borrow.bind(this);
    this.repay = this.repay.bind(this);
    this.placeBid = this.placeBid.bind(this);
    this.updateBid = this.updateBid.bind(this);
    this.removeBid = this.removeBid.bind(this);
    this.liquidate = this.liquidate.bind(this);
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateAddressConfig = this.updateAddressConfig.bind(this);
    this.updateRateConfig = this.updateRateConfig.bind(this);
    this.updateCommonConfig = this.updateCommonConfig.bind(this);
    this.depositReserveLiquidity = this.depositReserveLiquidity.bind(this);
    this.withdrawReserveLiquidity = this.withdrawReserveLiquidity.bind(this);
    this.reinforceBglToken = this.reinforceBglToken.bind(this);
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
    this.distributeFunds = this.distributeFunds.bind(this);
    this.removeCollection = this.removeCollection.bind(this);
    this.createProposal = this.createProposal.bind(this);
    this.rejectProposal = this.rejectProposal.bind(this);
    this.acceptProposal = this.acceptProposal.bind(this);
  }
  receive = ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive: {
            amount,
            msg,
            sender
          }
        })),
        funds: _funds
      })
    };
  };
  deposit = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          deposit: {}
        })),
        funds: _funds
      })
    };
  };
  unbond = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unbond: {}
        })),
        funds: _funds
      })
    };
  };
  withdraw = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw: {}
        })),
        funds: _funds
      })
    };
  };
  withdrawCollateral = ({
    collections
  }: {
    collections: CollectionInfoForString[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw_collateral: {
            collections
          }
        })),
        funds: _funds
      })
    };
  };
  depositCollateral = ({
    collections
  }: {
    collections: CollectionInfoForString[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          deposit_collateral: {
            collections
          }
        })),
        funds: _funds
      })
    };
  };
  borrow = ({
    amount
  }: {
    amount: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          borrow: {
            amount
          }
        })),
        funds: _funds
      })
    };
  };
  repay = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          repay: {}
        })),
        funds: _funds
      })
    };
  };
  placeBid = ({
    collections,
    discount
  }: {
    collections: CollectionInfoForString[];
    discount: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          place_bid: {
            collections,
            discount
          }
        })),
        funds: _funds
      })
    };
  };
  updateBid = ({
    amount,
    collections,
    creationDate,
    discount
  }: {
    amount: Uint128;
    collections: CollectionInfoForString[];
    creationDate: number;
    discount: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_bid: {
            amount,
            collections,
            creation_date: creationDate,
            discount
          }
        })),
        funds: _funds
      })
    };
  };
  removeBid = ({
    collectionAddresses,
    creationDate
  }: {
    collectionAddresses: string[];
    creationDate: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_bid: {
            collection_addresses: collectionAddresses,
            creation_date: creationDate
          }
        })),
        funds: _funds
      })
    };
  };
  liquidate = ({
    targets
  }: {
    targets: LiquidationItem[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          liquidate: {
            targets
          }
        })),
        funds: _funds
      })
    };
  };
  acceptAdminRole = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_admin_role: {}
        })),
        funds: _funds
      })
    };
  };
  updateAddressConfig = ({
    admin,
    marketMaker,
    minter,
    oracle,
    scheduler,
    worker
  }: {
    admin?: string;
    marketMaker?: string;
    minter?: string;
    oracle?: string;
    scheduler?: string;
    worker?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_address_config: {
            admin,
            market_maker: marketMaker,
            minter,
            oracle,
            scheduler,
            worker
          }
        })),
        funds: _funds
      })
    };
  };
  updateRateConfig = ({
    bidMinRate,
    borrowApr,
    borrowFeeRate,
    discountMaxRate,
    discountMinRate,
    liquidationFeeRate
  }: {
    bidMinRate?: Decimal;
    borrowApr?: Decimal;
    borrowFeeRate?: Decimal;
    discountMaxRate?: Decimal;
    discountMinRate?: Decimal;
    liquidationFeeRate?: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_rate_config: {
            bid_min_rate: bidMinRate,
            borrow_apr: borrowApr,
            borrow_fee_rate: borrowFeeRate,
            discount_max_rate: discountMaxRate,
            discount_min_rate: discountMinRate,
            liquidation_fee_rate: liquidationFeeRate
          }
        })),
        funds: _funds
      })
    };
  };
  updateCommonConfig = ({
    bglCurrency,
    borrowersReserveFractionRatio,
    collateralMinValue,
    mainCurrency,
    unbondingPeriod
  }: {
    bglCurrency?: CurrencyForTokenUnverified;
    borrowersReserveFractionRatio?: Decimal;
    collateralMinValue?: Uint128;
    mainCurrency?: CurrencyForTokenUnverified;
    unbondingPeriod?: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_common_config: {
            bgl_currency: bglCurrency,
            borrowers_reserve_fraction_ratio: borrowersReserveFractionRatio,
            collateral_min_value: collateralMinValue,
            main_currency: mainCurrency,
            unbonding_period: unbondingPeriod
          }
        })),
        funds: _funds
      })
    };
  };
  depositReserveLiquidity = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          deposit_reserve_liquidity: {}
        })),
        funds: _funds
      })
    };
  };
  withdrawReserveLiquidity = ({
    amount
  }: {
    amount: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw_reserve_liquidity: {
            amount
          }
        })),
        funds: _funds
      })
    };
  };
  reinforceBglToken = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          reinforce_bgl_token: {}
        })),
        funds: _funds
      })
    };
  };
  pause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          pause: {}
        })),
        funds: _funds
      })
    };
  };
  unpause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unpause: {}
        })),
        funds: _funds
      })
    };
  };
  distributeFunds = ({
    addressAndWeightList
  }: {
    addressAndWeightList: string[][];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          distribute_funds: {
            address_and_weight_list: addressAndWeightList
          }
        })),
        funds: _funds
      })
    };
  };
  removeCollection = ({
    address
  }: {
    address: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_collection: {
            address
          }
        })),
        funds: _funds
      })
    };
  };
  createProposal = ({
    proposal
  }: {
    proposal: ProposalForStringAndTokenUnverified;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_proposal: {
            proposal
          }
        })),
        funds: _funds
      })
    };
  };
  rejectProposal = ({
    id
  }: {
    id: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          reject_proposal: {
            id
          }
        })),
        funds: _funds
      })
    };
  };
  acceptProposal = ({
    id
  }: {
    id: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_proposal: {
            id
          }
        })),
        funds: _funds
      })
    };
  };
}