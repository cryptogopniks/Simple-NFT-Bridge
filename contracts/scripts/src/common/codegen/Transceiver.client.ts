/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, TransceiverType, InstantiateMsg, ExecuteMsg, Timestamp, Uint64, QueryMsg, MigrateMsg, ArrayOfChannel, Channel, Collection, ArrayOfCollection, Addr, Config, ArrayOfString, Boolean, ArrayOfCollectionInfo, CollectionInfo, ArrayOfTupleOfAddrAndArrayOfCollectionInfo } from "./Transceiver.types";
export interface TransceiverReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  pauseState: () => Promise<Boolean>;
  outposts: () => Promise<ArrayOfString>;
  collection: ({
    homeCollection,
    hubCollection
  }: {
    homeCollection?: string;
    hubCollection?: string;
  }) => Promise<Collection>;
  collectionList: () => Promise<ArrayOfCollection>;
  channelList: () => Promise<ArrayOfChannel>;
  user: ({
    address
  }: {
    address: string;
  }) => Promise<ArrayOfCollectionInfo>;
  userList: ({
    amount,
    startAfter
  }: {
    amount: number;
    startAfter?: string;
  }) => Promise<ArrayOfTupleOfAddrAndArrayOfCollectionInfo>;
}
export class TransceiverQueryClient implements TransceiverReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.pauseState = this.pauseState.bind(this);
    this.outposts = this.outposts.bind(this);
    this.collection = this.collection.bind(this);
    this.collectionList = this.collectionList.bind(this);
    this.channelList = this.channelList.bind(this);
    this.user = this.user.bind(this);
    this.userList = this.userList.bind(this);
  }
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  pauseState = async (): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pause_state: {}
    });
  };
  outposts = async (): Promise<ArrayOfString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      outposts: {}
    });
  };
  collection = async ({
    homeCollection,
    hubCollection
  }: {
    homeCollection?: string;
    hubCollection?: string;
  }): Promise<Collection> => {
    return this.client.queryContractSmart(this.contractAddress, {
      collection: {
        home_collection: homeCollection,
        hub_collection: hubCollection
      }
    });
  };
  collectionList = async (): Promise<ArrayOfCollection> => {
    return this.client.queryContractSmart(this.contractAddress, {
      collection_list: {}
    });
  };
  channelList = async (): Promise<ArrayOfChannel> => {
    return this.client.queryContractSmart(this.contractAddress, {
      channel_list: {}
    });
  };
  user = async ({
    address
  }: {
    address: string;
  }): Promise<ArrayOfCollectionInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user: {
        address
      }
    });
  };
  userList = async ({
    amount,
    startAfter
  }: {
    amount: number;
    startAfter?: string;
  }): Promise<ArrayOfTupleOfAddrAndArrayOfCollectionInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_list: {
        amount,
        start_after: startAfter
      }
    });
  };
}
export interface TransceiverInterface extends TransceiverReadOnlyInterface {
  contractAddress: string;
  sender: string;
  pause: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unpause: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  acceptAdminRole: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    admin,
    hubAddress,
    minNtrnIbcFee,
    nftMinter,
    tokenLimit
  }: {
    admin?: string;
    hubAddress?: string;
    minNtrnIbcFee?: Uint128;
    nftMinter?: string;
    tokenLimit?: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addCollection: ({
    homeCollection,
    hubCollection
  }: {
    homeCollection: string;
    hubCollection: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeCollection: ({
    hubCollection
  }: {
    hubCollection: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setChannel: ({
    fromHub,
    prefix,
    toHub
  }: {
    fromHub: string;
    prefix: string;
    toHub: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  send: ({
    hubCollection,
    target,
    tokenList
  }: {
    hubCollection: string;
    target?: string;
    tokenList: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  accept: ({
    msg,
    timestamp
  }: {
    msg: string;
    timestamp: Timestamp;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  transfer: ({
    step
  }: {
    step: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class TransceiverClient extends TransceiverQueryClient implements TransceiverInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.addCollection = this.addCollection.bind(this);
    this.removeCollection = this.removeCollection.bind(this);
    this.setChannel = this.setChannel.bind(this);
    this.send = this.send.bind(this);
    this.accept = this.accept.bind(this);
    this.transfer = this.transfer.bind(this);
  }
  pause = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pause: {}
    }, fee, memo, _funds);
  };
  unpause = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unpause: {}
    }, fee, memo, _funds);
  };
  acceptAdminRole = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_admin_role: {}
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    admin,
    hubAddress,
    minNtrnIbcFee,
    nftMinter,
    tokenLimit
  }: {
    admin?: string;
    hubAddress?: string;
    minNtrnIbcFee?: Uint128;
    nftMinter?: string;
    tokenLimit?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        hub_address: hubAddress,
        min_ntrn_ibc_fee: minNtrnIbcFee,
        nft_minter: nftMinter,
        token_limit: tokenLimit
      }
    }, fee, memo, _funds);
  };
  addCollection = async ({
    homeCollection,
    hubCollection
  }: {
    homeCollection: string;
    hubCollection: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_collection: {
        home_collection: homeCollection,
        hub_collection: hubCollection
      }
    }, fee, memo, _funds);
  };
  removeCollection = async ({
    hubCollection
  }: {
    hubCollection: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_collection: {
        hub_collection: hubCollection
      }
    }, fee, memo, _funds);
  };
  setChannel = async ({
    fromHub,
    prefix,
    toHub
  }: {
    fromHub: string;
    prefix: string;
    toHub: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_channel: {
        from_hub: fromHub,
        prefix,
        to_hub: toHub
      }
    }, fee, memo, _funds);
  };
  send = async ({
    hubCollection,
    target,
    tokenList
  }: {
    hubCollection: string;
    target?: string;
    tokenList: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      send: {
        hub_collection: hubCollection,
        target,
        token_list: tokenList
      }
    }, fee, memo, _funds);
  };
  accept = async ({
    msg,
    timestamp
  }: {
    msg: string;
    timestamp: Timestamp;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept: {
        msg,
        timestamp
      }
    }, fee, memo, _funds);
  };
  transfer = async ({
    step
  }: {
    step: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer: {
        step
      }
    }, fee, memo, _funds);
  };
}