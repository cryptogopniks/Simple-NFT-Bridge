/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, Uint128, Decimal, BidType, Addr, LiquidationItem, BiddedCollateralItem, TokenItem, QueryMsg, MigrateMsg, Config, ArrayOfLog, Log } from "./Scheduler.types";
export interface SchedulerMsg {
  contractAddress: string;
  sender: string;
  acceptAdminRole: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    admin,
    executionCooldown,
    lendingPlatform,
    offchainClock,
    worker
  }: {
    admin?: string;
    executionCooldown?: number;
    lendingPlatform?: string;
    offchainClock?: string[];
    worker?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  push: ({
    targets
  }: {
    targets: LiquidationItem[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class SchedulerMsgComposer implements SchedulerMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.push = this.push.bind(this);
  }
  acceptAdminRole = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_admin_role: {}
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    admin,
    executionCooldown,
    lendingPlatform,
    offchainClock,
    worker
  }: {
    admin?: string;
    executionCooldown?: number;
    lendingPlatform?: string;
    offchainClock?: string[];
    worker?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            admin,
            execution_cooldown: executionCooldown,
            lending_platform: lendingPlatform,
            offchain_clock: offchainClock,
            worker
          }
        })),
        funds: _funds
      })
    };
  };
  push = ({
    targets
  }: {
    targets: LiquidationItem[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          push: {
            targets
          }
        })),
        funds: _funds
      })
    };
  };
}