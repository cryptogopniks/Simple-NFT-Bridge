/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Uint128, TransceiverType, InstantiateMsg, ExecuteMsg, Timestamp, Uint64, QueryMsg, MigrateMsg, ArrayOfChannel, Channel, Collection, ArrayOfCollection, Addr, Config, ArrayOfString, Boolean, NullableString } from "./Transceiver.types";
export interface TransceiverMsg {
  contractAddress: string;
  sender: string;
  pause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unpause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptAdminRole: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    admin,
    hubAddress,
    minNtrnIbcFee,
    nftMinter,
    tokenLimit
  }: {
    admin?: string;
    hubAddress?: string;
    minNtrnIbcFee?: Uint128;
    nftMinter?: string;
    tokenLimit?: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addCollection: ({
    homeCollection,
    hubCollection
  }: {
    homeCollection: string;
    hubCollection: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeCollection: ({
    hubCollection
  }: {
    hubCollection: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setRetranslationOutpost: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setChannel: ({
    fromHub,
    prefix,
    toHub
  }: {
    fromHub: string;
    prefix: string;
    toHub: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  send: ({
    hubCollection,
    target,
    tokenList
  }: {
    hubCollection: string;
    target?: string;
    tokenList: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  accept: ({
    msg,
    timestamp
  }: {
    msg: string;
    timestamp: Timestamp;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class TransceiverMsgComposer implements TransceiverMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.addCollection = this.addCollection.bind(this);
    this.removeCollection = this.removeCollection.bind(this);
    this.setRetranslationOutpost = this.setRetranslationOutpost.bind(this);
    this.setChannel = this.setChannel.bind(this);
    this.send = this.send.bind(this);
    this.accept = this.accept.bind(this);
  }
  pause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          pause: {}
        })),
        funds: _funds
      })
    };
  };
  unpause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unpause: {}
        })),
        funds: _funds
      })
    };
  };
  acceptAdminRole = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_admin_role: {}
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    admin,
    hubAddress,
    minNtrnIbcFee,
    nftMinter,
    tokenLimit
  }: {
    admin?: string;
    hubAddress?: string;
    minNtrnIbcFee?: Uint128;
    nftMinter?: string;
    tokenLimit?: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            admin,
            hub_address: hubAddress,
            min_ntrn_ibc_fee: minNtrnIbcFee,
            nft_minter: nftMinter,
            token_limit: tokenLimit
          }
        })),
        funds: _funds
      })
    };
  };
  addCollection = ({
    homeCollection,
    hubCollection
  }: {
    homeCollection: string;
    hubCollection: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_collection: {
            home_collection: homeCollection,
            hub_collection: hubCollection
          }
        })),
        funds: _funds
      })
    };
  };
  removeCollection = ({
    hubCollection
  }: {
    hubCollection: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_collection: {
            hub_collection: hubCollection
          }
        })),
        funds: _funds
      })
    };
  };
  setRetranslationOutpost = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_retranslation_outpost: {}
        })),
        funds: _funds
      })
    };
  };
  setChannel = ({
    fromHub,
    prefix,
    toHub
  }: {
    fromHub: string;
    prefix: string;
    toHub: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_channel: {
            from_hub: fromHub,
            prefix,
            to_hub: toHub
          }
        })),
        funds: _funds
      })
    };
  };
  send = ({
    hubCollection,
    target,
    tokenList
  }: {
    hubCollection: string;
    target?: string;
    tokenList: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          send: {
            hub_collection: hubCollection,
            target,
            token_list: tokenList
          }
        })),
        funds: _funds
      })
    };
  };
  accept = ({
    msg,
    timestamp
  }: {
    msg: string;
    timestamp: Timestamp;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept: {
            msg,
            timestamp
          }
        })),
        funds: _funds
      })
    };
  };
}