/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, String, Addr, ArrayOfTupleOfAddrAndString, Config } from "./NftMinter.types";
export interface NftMinterMsg {
  contractAddress: string;
  sender: string;
  acceptAdminRole: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    admin
  }: {
    admin?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  createCollection: ({
    name
  }: {
    name: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  mint: ({
    collection,
    recipient,
    tokenList
  }: {
    collection: string;
    recipient: string;
    tokenList: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  burn: ({
    collection,
    tokenList
  }: {
    collection: string;
    tokenList: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class NftMinterMsgComposer implements NftMinterMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.createCollection = this.createCollection.bind(this);
    this.mint = this.mint.bind(this);
    this.burn = this.burn.bind(this);
  }
  acceptAdminRole = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_admin_role: {}
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    admin
  }: {
    admin?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            admin
          }
        })),
        funds: _funds
      })
    };
  };
  createCollection = ({
    name
  }: {
    name: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_collection: {
            name
          }
        })),
        funds: _funds
      })
    };
  };
  mint = ({
    collection,
    recipient,
    tokenList
  }: {
    collection: string;
    recipient: string;
    tokenList: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          mint: {
            collection,
            recipient,
            token_list: tokenList
          }
        })),
        funds: _funds
      })
    };
  };
  burn = ({
    collection,
    tokenList
  }: {
    collection: string;
    tokenList: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          burn: {
            collection,
            token_list: tokenList
          }
        })),
        funds: _funds
      })
    };
  };
}