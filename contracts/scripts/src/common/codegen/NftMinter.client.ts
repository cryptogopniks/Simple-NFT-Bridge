/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, String, Addr, ArrayOfTupleOfAddrAndString, Config } from "./NftMinter.types";
export interface NftMinterReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  collection: ({
    address
  }: {
    address: string;
  }) => Promise<String>;
  collectionList: ({
    amount,
    startAfter
  }: {
    amount: number;
    startAfter?: string;
  }) => Promise<ArrayOfTupleOfAddrAndString>;
}
export class NftMinterQueryClient implements NftMinterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.collection = this.collection.bind(this);
    this.collectionList = this.collectionList.bind(this);
  }
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  collection = async ({
    address
  }: {
    address: string;
  }): Promise<String> => {
    return this.client.queryContractSmart(this.contractAddress, {
      collection: {
        address
      }
    });
  };
  collectionList = async ({
    amount,
    startAfter
  }: {
    amount: number;
    startAfter?: string;
  }): Promise<ArrayOfTupleOfAddrAndString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      collection_list: {
        amount,
        start_after: startAfter
      }
    });
  };
}
export interface NftMinterInterface extends NftMinterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  acceptAdminRole: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    admin
  }: {
    admin?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  createCollection: ({
    name
  }: {
    name: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mint: ({
    collection,
    recipient,
    tokenList
  }: {
    collection: string;
    recipient: string;
    tokenList: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  burn: ({
    collection,
    tokenList
  }: {
    collection: string;
    tokenList: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class NftMinterClient extends NftMinterQueryClient implements NftMinterInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.createCollection = this.createCollection.bind(this);
    this.mint = this.mint.bind(this);
    this.burn = this.burn.bind(this);
  }
  acceptAdminRole = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_admin_role: {}
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    admin
  }: {
    admin?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin
      }
    }, fee, memo, _funds);
  };
  createCollection = async ({
    name
  }: {
    name: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_collection: {
        name
      }
    }, fee, memo, _funds);
  };
  mint = async ({
    collection,
    recipient,
    tokenList
  }: {
    collection: string;
    recipient: string;
    tokenList: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint: {
        collection,
        recipient,
        token_list: tokenList
      }
    }, fee, memo, _funds);
  };
  burn = async ({
    collection,
    tokenList
  }: {
    collection: string;
    tokenList: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn: {
        collection,
        token_list: tokenList
      }
    }, fee, memo, _funds);
  };
}