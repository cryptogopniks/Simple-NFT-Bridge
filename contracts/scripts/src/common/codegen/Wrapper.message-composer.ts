/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, Addr, Collection, ArrayOfCollection, Config } from "./Wrapper.types";
export interface WrapperMsg {
  contractAddress: string;
  sender: string;
  acceptAdminRole: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    admin,
    worker
  }: {
    admin?: string;
    worker?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  pause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unpause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  wrap: ({
    collectionIn,
    tokenList
  }: {
    collectionIn: string;
    tokenList: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unwrap: ({
    collectionOut,
    tokenList
  }: {
    collectionOut: string;
    tokenList: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addCollection: ({
    collectionIn,
    collectionOut
  }: {
    collectionIn: string;
    collectionOut: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeCollection: ({
    collectionIn
  }: {
    collectionIn: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class WrapperMsgComposer implements WrapperMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
    this.wrap = this.wrap.bind(this);
    this.unwrap = this.unwrap.bind(this);
    this.addCollection = this.addCollection.bind(this);
    this.removeCollection = this.removeCollection.bind(this);
  }
  acceptAdminRole = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_admin_role: {}
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    admin,
    worker
  }: {
    admin?: string;
    worker?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            admin,
            worker
          }
        })),
        funds: _funds
      })
    };
  };
  pause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          pause: {}
        })),
        funds: _funds
      })
    };
  };
  unpause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unpause: {}
        })),
        funds: _funds
      })
    };
  };
  wrap = ({
    collectionIn,
    tokenList
  }: {
    collectionIn: string;
    tokenList: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          wrap: {
            collection_in: collectionIn,
            token_list: tokenList
          }
        })),
        funds: _funds
      })
    };
  };
  unwrap = ({
    collectionOut,
    tokenList
  }: {
    collectionOut: string;
    tokenList: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unwrap: {
            collection_out: collectionOut,
            token_list: tokenList
          }
        })),
        funds: _funds
      })
    };
  };
  addCollection = ({
    collectionIn,
    collectionOut
  }: {
    collectionIn: string;
    collectionOut: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_collection: {
            collection_in: collectionIn,
            collection_out: collectionOut
          }
        })),
        funds: _funds
      })
    };
  };
  removeCollection = ({
    collectionIn
  }: {
    collectionIn: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_collection: {
            collection_in: collectionIn
          }
        })),
        funds: _funds
      })
    };
  };
}