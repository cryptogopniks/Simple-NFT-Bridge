/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type TokenUnverified = {
  native: {
    denom: string;
  };
} | {
  cw20: {
    address: string;
  };
};
export type Decimal = string;
export type Uint128 = string;
export interface InstantiateMsg {
  bgl_currency?: CurrencyForTokenUnverified | null;
  bid_min_rate?: Decimal | null;
  borrow_apr?: Decimal | null;
  borrow_fee_rate?: Decimal | null;
  borrowers_reserve_fraction_ratio?: Decimal | null;
  collateral_min_value?: Uint128 | null;
  discount_max_rate?: Decimal | null;
  discount_min_rate?: Decimal | null;
  liquidation_fee_rate?: Decimal | null;
  main_currency: CurrencyForTokenUnverified;
  market_maker?: string | null;
  minter?: string | null;
  oracle?: string | null;
  scheduler?: string | null;
  unbonding_period?: number | null;
  worker?: string | null;
}
export interface CurrencyForTokenUnverified {
  decimals: number;
  token: TokenUnverified;
}
export type ExecuteMsg = {
  receive: Cw20ReceiveMsg;
} | {
  deposit: {};
} | {
  unbond: {};
} | {
  withdraw: {};
} | {
  withdraw_collateral: {
    collections: CollectionInfoForString[];
  };
} | {
  deposit_collateral: {
    collections: CollectionInfoForString[];
  };
} | {
  borrow: {
    amount: Uint128;
  };
} | {
  repay: {};
} | {
  place_bid: {
    collections: CollectionInfoForString[];
    discount: Decimal;
  };
} | {
  update_bid: {
    amount: Uint128;
    collections: CollectionInfoForString[];
    creation_date: number;
    discount: Decimal;
  };
} | {
  remove_bid: {
    collection_addresses: string[];
    creation_date: number;
  };
} | {
  liquidate: {
    targets: LiquidationItem[];
  };
} | {
  accept_admin_role: {};
} | {
  update_address_config: {
    admin?: string | null;
    market_maker?: string | null;
    minter?: string | null;
    oracle?: string | null;
    scheduler?: string | null;
    worker?: string | null;
  };
} | {
  update_rate_config: {
    bid_min_rate?: Decimal | null;
    borrow_apr?: Decimal | null;
    borrow_fee_rate?: Decimal | null;
    discount_max_rate?: Decimal | null;
    discount_min_rate?: Decimal | null;
    liquidation_fee_rate?: Decimal | null;
  };
} | {
  update_common_config: {
    bgl_currency?: CurrencyForTokenUnverified | null;
    borrowers_reserve_fraction_ratio?: Decimal | null;
    collateral_min_value?: Uint128 | null;
    main_currency?: CurrencyForTokenUnverified | null;
    unbonding_period?: number | null;
  };
} | {
  deposit_reserve_liquidity: {};
} | {
  withdraw_reserve_liquidity: {
    amount: Uint128;
  };
} | {
  reinforce_bgl_token: {};
} | {
  pause: {};
} | {
  unpause: {};
} | {
  distribute_funds: {
    address_and_weight_list: [string, Decimal][];
  };
} | {
  remove_collection: {
    address: string;
  };
} | {
  create_proposal: {
    proposal: ProposalForStringAndTokenUnverified;
  };
} | {
  reject_proposal: {
    id: number;
  };
} | {
  accept_proposal: {
    id: number;
  };
};
export type Binary = string;
export type BidType = "liquidation_bid" | "collection_offer";
export type Addr = string;
export type ProposalStatus = "active" | "accepted" | "rejected";
export type ProposalTypeForString = {
  add_collection: {
    collection: CollectionForString;
    collection_address: string;
  };
} | {
  update_collection: {
    collection_address: string;
    new_collection: CollectionForString;
    new_collection_address?: string | null;
  };
};
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
export interface CollectionInfoForString {
  collection_address: string;
  token_id_list: string[];
}
export interface LiquidationItem {
  borrower: string;
  liquidation_set: BiddedCollateralItem[];
}
export interface BiddedCollateralItem {
  bid_amount: Uint128;
  bid_creation_date: number;
  bid_discount: Decimal;
  bid_type: BidType;
  collateral_price: Uint128;
  collection: Addr;
  liquidation_price: Uint128;
  liquidator: Addr;
  owner: Addr;
  token_item: TokenItem;
}
export interface TokenItem {
  creation_date: number;
  id: string;
}
export interface ProposalForStringAndTokenUnverified {
  listing_price: FundsForTokenUnverified;
  proposal_status?: ProposalStatus | null;
  proposal_type: ProposalTypeForString;
}
export interface FundsForTokenUnverified {
  amount: Uint128;
  currency: CurrencyForTokenUnverified;
}
export interface CollectionForString {
  name: string;
  owner: string;
}
export type QueryMsg = {
  query_address_config: {};
} | {
  query_rate_config: {};
} | {
  query_common_config: {};
} | {
  query_platform_revenue: {};
} | {
  query_balances: {};
} | {
  query_unbonder_list: {
    amount: number;
    start_after?: string | null;
  };
} | {
  query_unbonder: {
    address: string;
  };
} | {
  query_borrower_list: {
    amount: number;
    start_after?: string | null;
  };
} | {
  query_borrower: {
    address: string;
  };
} | {
  query_liquidator_list: {
    amount: number;
    start_after?: string | null;
  };
} | {
  query_liquidator: {
    address: string;
  };
} | {
  query_collateral_list: {
    amount: number;
    start_after?: string | null;
  };
} | {
  query_collateral: {
    collection_address: string;
  };
} | {
  query_collateral_by_owner: {
    owner: string;
  };
} | {
  query_liquidation_bids_by_collection_address_list: {
    amount: number;
    start_after?: string | null;
  };
} | {
  query_liquidation_bids_by_collection_address: {
    address: string;
  };
} | {
  query_liquidation_bids_by_liquidator_address_list: {
    amount: number;
    start_after?: string | null;
  };
} | {
  query_liquidation_bids_by_liquidator_address: {
    address: string;
  };
} | {
  query_proposals: {
    amount: number;
    start_after?: number | null;
  };
} | {
  query_collection_list: {
    amount: number;
    start_after?: string | null;
  };
} | {
  query_collection: {
    address: string;
  };
} | {
  query_bgl_currency_to_main_currency_price: {};
} | {
  query_conditional_deposit_apr: {
    amount_to_deposit?: Uint128 | null;
    amount_to_withdraw?: Uint128 | null;
  };
} | {
  query_ltv_list: {
    amount: number;
    start_after?: string | null;
  };
} | {
  query_conditional_ltv: {
    amount_to_borrow?: Uint128 | null;
    amount_to_deposit?: Uint128 | null;
    amount_to_repay?: Uint128 | null;
    amount_to_withdraw?: Uint128 | null;
    borrower: string;
  };
} | {
  query_total_available_to_borrow_liquidity: {};
} | {
  query_available_to_borrow: {
    borrower: string;
    target_ltv?: Decimal | null;
  };
} | {
  query_amounts: {};
} | {
  query_user_info: {
    address: string;
  };
};
export interface MigrateMsg {
  version: string;
}
export interface AddressConfig {
  admin: Addr;
  market_maker?: Addr | null;
  minter?: Addr | null;
  oracle?: Addr | null;
  scheduler?: Addr | null;
  worker?: Addr | null;
}
export interface QueryAmountsResponse {
  borrowers: number;
  collaterals: number;
  collections: number;
  liquidation_bids: number;
  liquidators: number;
  proposals: number;
  unbonders: number;
}
export interface Balances {
  regular: RegularBalances;
  reserve: ReserveBalances;
}
export interface RegularBalances {
  accumulated_rewards: Uint128;
  bgl_supply: Uint128;
  borrowed: Vault;
  deposited: Uint128;
  liquidation_bids: Uint128;
  main_pool: Uint128;
  unbonded: Uint128;
}
export interface Vault {
  amount: Uint128;
  creation_date: number;
}
export interface ReserveBalances {
  borrowed: Vault;
  deposited: Uint128;
  withdrawn: Uint128;
}
export interface Borrower {
  accumulated_loan: Uint128;
  loan: Vault;
}
export type ArrayOfQueryBorrowersResponseItem = QueryBorrowersResponseItem[];
export interface QueryBorrowersResponseItem {
  address: Addr;
  borrower: Borrower;
}
export type ArrayOfCollateral = Collateral[];
export interface Collateral {
  owner: Addr;
  token_item_list: TokenItem[];
}
export type ArrayOfQueryCollateralsResponseItem = QueryCollateralsResponseItem[];
export interface QueryCollateralsResponseItem {
  address: Addr;
  collateral: Collateral[];
}
export interface CollectionForAddr {
  name: string;
  owner: Addr;
}
export type ArrayOfQueryCollectionsResponseItem = QueryCollectionsResponseItem[];
export interface QueryCollectionsResponseItem {
  address: Addr;
  collection: CollectionForAddr;
}
export type Token = {
  native: {
    denom: string;
  };
} | {
  cw20: {
    address: Addr;
  };
};
export interface CommonConfig {
  bgl_currency?: CurrencyForToken | null;
  borrowers_reserve_fraction_ratio: Decimal;
  collateral_min_value: Uint128;
  main_currency: CurrencyForToken;
  unbonding_period: number;
}
export interface CurrencyForToken {
  decimals: number;
  token: Token;
}
export type ArrayOfLiquidationBid = LiquidationBid[];
export interface LiquidationBid {
  amount: Uint128;
  bid_type: BidType;
  creation_date: number;
  discount: Decimal;
  liquidator: Addr;
  token_id_list: string[];
}
export type ArrayOfQueryLiquidationBidsByCollectionAddressListResponseItem = QueryLiquidationBidsByCollectionAddressListResponseItem[];
export interface QueryLiquidationBidsByCollectionAddressListResponseItem {
  collection_address: Addr;
  liquidation_bids: LiquidationBid[];
}
export type ArrayOfQueryLiquidationBidsByLiquidatorAddressListResponseItem = QueryLiquidationBidsByLiquidatorAddressListResponseItem[];
export interface QueryLiquidationBidsByLiquidatorAddressListResponseItem {
  collection_and_liquidation_bids_list: QueryLiquidationBidsByCollectionAddressListResponseItem[];
  liquidator_address: Addr;
}
export interface Liquidator {
  collection_addresses: Addr[];
}
export type ArrayOfQueryLiquidatorsResponseItem = QueryLiquidatorsResponseItem[];
export interface QueryLiquidatorsResponseItem {
  address: Addr;
  liquidator: Liquidator;
}
export type ArrayOfTupleOfAddrAndNullable_Decimal = [Addr, Decimal | null][];
export type ArrayOfFundsForToken = FundsForToken[];
export interface FundsForToken {
  amount: Uint128;
  currency: CurrencyForToken;
}
export type ProposalTypeForAddr = {
  add_collection: {
    collection: CollectionForAddr;
    collection_address: Addr;
  };
} | {
  update_collection: {
    collection_address: Addr;
    new_collection: CollectionForAddr;
    new_collection_address?: Addr | null;
  };
};
export type ArrayOfQueryProposalsResponseItem = QueryProposalsResponseItem[];
export interface QueryProposalsResponseItem {
  id: number;
  proposal: ProposalForAddrAndToken;
}
export interface ProposalForAddrAndToken {
  listing_price: FundsForToken;
  proposal_status?: ProposalStatus | null;
  proposal_type: ProposalTypeForAddr;
}
export interface RateConfig {
  bid_min_rate: Decimal;
  borrow_apr: Decimal;
  borrow_fee_rate: Decimal;
  discount_max_rate: Decimal;
  discount_min_rate: Decimal;
  liquidation_fee_rate: Decimal;
}
export interface Unbonder {
  returned_and_unbonded: [Uint128, Vault][];
}
export type ArrayOfQueryUnbondersResponseItem = QueryUnbondersResponseItem[];
export interface QueryUnbondersResponseItem {
  address: Addr;
  unbonder: Unbonder;
}
export interface QueryUserInfoResponse {
  available_to_borrow: Uint128;
  bgl_token_balance: Uint128;
  collateral: QueryCollateralsResponseItem[];
  liquidation_bids: QueryLiquidationBidsByCollectionAddressListResponseItem[];
  loan: Uint128;
  ltv: Decimal;
  main_token_balance: Uint128;
  returned_and_unbonded: [Uint128, Vault][];
}