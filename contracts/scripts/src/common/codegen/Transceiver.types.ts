/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export type TransceiverType = "hub" | "outpost";
export interface InstantiateMsg {
  hub_address?: string | null;
  min_ntrn_ibc_fee?: Uint128 | null;
  nft_minter?: string | null;
  token_limit?: number | null;
  transceiver_type: TransceiverType;
}
export type ExecuteMsg = {
  pause: {};
} | {
  unpause: {};
} | {
  accept_admin_role: {};
} | {
  update_config: {
    admin?: string | null;
    hub_address?: string | null;
    min_ntrn_ibc_fee?: Uint128 | null;
    nft_minter?: string | null;
    token_limit?: number | null;
  };
} | {
  add_collection: {
    home_collection: string;
    hub_collection: string;
  };
} | {
  remove_collection: {
    hub_collection: string;
  };
} | {
  set_channel: {
    from_hub: string;
    prefix: string;
    to_hub: string;
  };
} | {
  send: {
    hub_collection: string;
    target?: string | null;
    token_list: string[];
  };
} | {
  accept: {
    msg: string;
    timestamp: Timestamp;
  };
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type QueryMsg = {
  config: {};
} | {
  pause_state: {};
} | {
  outposts: {};
} | {
  collection: {
    home_collection?: string | null;
    hub_collection?: string | null;
  };
} | {
  collection_list: {};
} | {
  channel_list: {};
} | {
  user: {
    address: string;
  };
} | {
  user_list: {
    amount: number;
    start_after?: string | null;
  };
};
export interface MigrateMsg {
  version: string;
}
export type ArrayOfChannel = Channel[];
export interface Channel {
  from_hub: string;
  prefix: string;
  to_hub: string;
}
export interface Collection {
  home_collection: string;
  hub_collection: string;
}
export type ArrayOfCollection = Collection[];
export type Addr = string;
export interface Config {
  admin: Addr;
  hub_address: string;
  min_ntrn_ibc_fee: Uint128;
  nft_minter: string;
  token_limit: number;
  transceiver_type: TransceiverType;
}
export type ArrayOfString = string[];
export type Boolean = boolean;
export type ArrayOfCollectionInfo = CollectionInfo[];
export interface CollectionInfo {
  home_collection: string;
  token_list: string[];
}
export type ArrayOfTupleOfAddrAndArrayOfCollectionInfo = [Addr, CollectionInfo[]][];