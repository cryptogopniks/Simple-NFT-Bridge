/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Decimal, BidType, Addr, LiquidationItem, BiddedCollateralItem, TokenItem, QueryMsg, MigrateMsg, Config, ArrayOfLog, Log } from "./Scheduler.types";
export interface SchedulerReadOnlyInterface {
  contractAddress: string;
  queryConfig: () => Promise<Config>;
  queryLog: () => Promise<ArrayOfLog>;
}
export class SchedulerQueryClient implements SchedulerReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryConfig = this.queryConfig.bind(this);
    this.queryLog = this.queryLog.bind(this);
  }
  queryConfig = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config: {}
    });
  };
  queryLog = async (): Promise<ArrayOfLog> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_log: {}
    });
  };
}
export interface SchedulerInterface extends SchedulerReadOnlyInterface {
  contractAddress: string;
  sender: string;
  acceptAdminRole: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    admin,
    executionCooldown,
    lendingPlatform,
    offchainClock,
    worker
  }: {
    admin?: string;
    executionCooldown?: number;
    lendingPlatform?: string;
    offchainClock?: string[];
    worker?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  push: ({
    targets
  }: {
    targets: LiquidationItem[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class SchedulerClient extends SchedulerQueryClient implements SchedulerInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.push = this.push.bind(this);
  }
  acceptAdminRole = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_admin_role: {}
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    admin,
    executionCooldown,
    lendingPlatform,
    offchainClock,
    worker
  }: {
    admin?: string;
    executionCooldown?: number;
    lendingPlatform?: string;
    offchainClock?: string[];
    worker?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        execution_cooldown: executionCooldown,
        lending_platform: lendingPlatform,
        offchain_clock: offchainClock,
        worker
      }
    }, fee, memo, _funds);
  };
  push = async ({
    targets
  }: {
    targets: LiquidationItem[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      push: {
        targets
      }
    }, fee, memo, _funds);
  };
}