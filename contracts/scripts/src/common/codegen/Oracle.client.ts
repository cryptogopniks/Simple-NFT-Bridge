/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, Uint64, Addr, Config, Uint128, QueryPricesResponse, PriceItem } from "./Oracle.types";
export interface OracleReadOnlyInterface {
  contractAddress: string;
  queryConfig: () => Promise<Config>;
  queryPrices: ({
    amount,
    collections,
    startAfter
  }: {
    amount: number;
    collections?: string[];
    startAfter?: string;
  }) => Promise<QueryPricesResponse>;
  queryBlockTime: () => Promise<Uint64>;
}
export class OracleQueryClient implements OracleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryConfig = this.queryConfig.bind(this);
    this.queryPrices = this.queryPrices.bind(this);
    this.queryBlockTime = this.queryBlockTime.bind(this);
  }
  queryConfig = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config: {}
    });
  };
  queryPrices = async ({
    amount,
    collections,
    startAfter
  }: {
    amount: number;
    collections?: string[];
    startAfter?: string;
  }): Promise<QueryPricesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_prices: {
        amount,
        collections,
        start_after: startAfter
      }
    });
  };
  queryBlockTime = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_block_time: {}
    });
  };
}
export interface OracleInterface extends OracleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  acceptAdminRole: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    admin,
    controller,
    executionCooldown,
    maxPriceUpdatePeriod,
    worker
  }: {
    admin?: string;
    controller?: string[];
    executionCooldown?: number;
    maxPriceUpdatePeriod?: number;
    worker?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updatePrices: ({
    data
  }: {
    data: string[][];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removePrices: ({
    collections
  }: {
    collections: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OracleClient extends OracleQueryClient implements OracleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updatePrices = this.updatePrices.bind(this);
    this.removePrices = this.removePrices.bind(this);
  }
  acceptAdminRole = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_admin_role: {}
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    admin,
    controller,
    executionCooldown,
    maxPriceUpdatePeriod,
    worker
  }: {
    admin?: string;
    controller?: string[];
    executionCooldown?: number;
    maxPriceUpdatePeriod?: number;
    worker?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        controller,
        execution_cooldown: executionCooldown,
        max_price_update_period: maxPriceUpdatePeriod,
        worker
      }
    }, fee, memo, _funds);
  };
  updatePrices = async ({
    data
  }: {
    data: string[][];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_prices: {
        data
      }
    }, fee, memo, _funds);
  };
  removePrices = async ({
    collections
  }: {
    collections: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_prices: {
        collections
      }
    }, fee, memo, _funds);
  };
}